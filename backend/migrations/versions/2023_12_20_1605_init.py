"""init

Revision ID: 0aa1535b452d
Revises: No down revision
Create Date: 2023-12-20 16:05:43.751433

"""
import sqlalchemy as sa  # noqa: F401
import sqlmodel  # noqa: F401
from alembic import op
from app.shared.types import get_all_unified_types

# revision identifiers, used by Alembic.
revision = "0aa1535b452d"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "building_element",
        sa.Column(
            "created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("upload_uuid", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.Column("category", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("reference", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("total", sa.Float(), nullable=True),
        sa.Column("total_mass_kg", sa.Float(), nullable=True),
        sa.Column("total_volume_m3", sa.Float(), nullable=True),
        sa.Column("has_energy_recovery", sa.Boolean(), nullable=True),
        sa.Column("has_elimination", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "collector",
        sa.Column(
            "created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("zip_code", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("phone", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "contractor",
        sa.Column(
            "created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("zip_code", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("phone", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    unified_type_table = op.create_table(
        "unified_type",
        sa.Column("discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("value", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("discriminator", "id"),
    )
    op.create_index(op.f("ix_unified_type_value"), "unified_type", ["value"], unique=False)
    op.bulk_insert(
        unified_type_table,
        get_all_unified_types(),
    )
    op.create_table(
        "building_element_to_building_element_unit_type",
        sa.Column("building_element_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["building_element_id"],
            ["building_element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("building_element_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "building_element_to_building_element_worksheet_type",
        sa.Column("building_element_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["building_element_id"],
            ["building_element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("building_element_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "building_element_to_health_status_type",
        sa.Column("building_element_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["building_element_id"],
            ["building_element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("building_element_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "building_element_to_material_type",
        sa.Column("building_element_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["building_element_id"],
            ["building_element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("building_element_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "building_element_to_recycling_potential_type",
        sa.Column("building_element_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["building_element_id"],
            ["building_element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("building_element_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "building_element_to_reuse_potential_type",
        sa.Column("building_element_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["building_element_id"],
            ["building_element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("building_element_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "building_element_to_waste_code_type",
        sa.Column("building_element_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["building_element_id"],
            ["building_element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("building_element_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "collector_to_authorized_vehicle_type",
        sa.Column("collector_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["collector_id"],
            ["collector.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("collector_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "collector_to_circular_strategy_type",
        sa.Column("collector_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["collector_id"],
            ["collector.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("collector_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "collector_to_material_type",
        sa.Column("collector_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["collector_id"],
            ["collector.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("collector_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "collector_to_waste_code_type",
        sa.Column("collector_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["collector_id"],
            ["collector.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("collector_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "contractor_to_circular_service_type",
        sa.Column("contractor_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["contractor_id"],
            ["contractor.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("contractor_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "contractor_to_material_type",
        sa.Column("contractor_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["contractor_id"],
            ["contractor.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("contractor_id", "unified_type_id", "unified_type_discriminator"),
    )
    op.create_table(
        "contractor_to_waste_code_type",
        sa.Column("contractor_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_id", sa.Integer(), nullable=True),
        sa.Column("unified_type_discriminator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["contractor_id"],
            ["contractor.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unified_type_id", "unified_type_discriminator"],
            ["unified_type.id", "unified_type.discriminator"],
        ),
        sa.PrimaryKeyConstraint("contractor_id", "unified_type_id", "unified_type_discriminator"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("contractor_to_waste_code_type")
    op.drop_table("contractor_to_material_type")
    op.drop_table("contractor_to_circular_service_type")
    op.drop_table("collector_to_waste_code_type")
    op.drop_table("collector_to_material_type")
    op.drop_table("collector_to_circular_strategy_type")
    op.drop_table("collector_to_authorized_vehicle_type")
    op.drop_table("building_element_to_waste_code_type")
    op.drop_table("building_element_to_reuse_potential_type")
    op.drop_table("building_element_to_recycling_potential_type")
    op.drop_table("building_element_to_material_type")
    op.drop_table("building_element_to_health_status_type")
    op.drop_table("building_element_to_building_element_worksheet_type")
    op.drop_table("building_element_to_building_element_unit_type")
    op.drop_index(op.f("ix_unified_type_value"), table_name="unified_type")
    op.drop_table("unified_type")
    op.drop_table("contractor")
    op.drop_table("collector")
    op.drop_table("building_element")
    # ### end Alembic commands ###
