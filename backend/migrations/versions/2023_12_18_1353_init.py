"""init

Revision ID: e32c08903101
Revises: No down revision
Create Date: 2023-12-18 13:53:03.794280

"""
import sqlalchemy as sa  # noqa: F401
import sqlmodel  # noqa: F401
from alembic import op
from app.shared.types import (
    AuthorizedVehicleEnum,
    BuildingElementUnitEnum,
    CircularStrategyEnum,
    ItemCategoryEnum,
    MaterialEnum,
    WasteCodeEnum,
)

# revision identifiers, used by Alembic.
revision = "e32c08903101"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    authorized_vehicle_type_table = op.create_table(
        "authorized_vehicle_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_authorized_vehicle_type_name"), "authorized_vehicle_type", ["name"], unique=True)
    op.bulk_insert(
        authorized_vehicle_type_table,
        [{"id": typeEnum.value[0], "name": typeEnum.value[1]} for typeEnum in AuthorizedVehicleEnum],
    )
    op.create_table(
        "building_element_category_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_building_element_category_type_name"), "building_element_category_type", ["name"], unique=True
    )
    op.create_table(
        "building_element_constitution_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_building_element_constitution_type_name"), "building_element_constitution_type", ["name"], unique=True
    )
    op.create_table(
        "building_element_material_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_building_element_material_type_name"), "building_element_material_type", ["name"], unique=True
    )
    building_element_unit_type_table = op.create_table(
        "building_element_unit_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_building_element_unit_type_name"), "building_element_unit_type", ["name"], unique=True)
    op.bulk_insert(
        building_element_unit_type_table,
        [{"id": typeEnum.value[0], "name": typeEnum.value[1]} for typeEnum in BuildingElementUnitEnum],
    )
    circular_strategy_type_table = op.create_table(
        "circular_strategy_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_circular_strategy_type_name"), "circular_strategy_type", ["name"], unique=True)
    op.bulk_insert(
        circular_strategy_type_table,
        [{"id": typeEnum.value[0], "name": typeEnum.value[1]} for typeEnum in CircularStrategyEnum],
    )
    op.create_table(
        "collector",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("zip_code", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("lat", sa.Float(), nullable=False),
        sa.Column("lng", sa.Float(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("phone", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "contractor",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("zip_code", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("lat", sa.Float(), nullable=False),
        sa.Column("lng", sa.Float(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("phone", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    item_category_type_table = op.create_table(
        "item_category_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_item_category_type_name"), "item_category_type", ["name"], unique=True)
    op.bulk_insert(
        item_category_type_table,
        [{"id": typeEnum.value[0], "name": typeEnum.value[1]} for typeEnum in ItemCategoryEnum],
    )
    material_type_table = op.create_table(
        "material_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_material_type_name"), "material_type", ["name"], unique=True)
    op.bulk_insert(
        material_type_table,
        [{"id": typeEnum.value[0], "name": typeEnum.value[1]} for typeEnum in MaterialEnum],
    )
    waste_code_type_table = op.create_table(
        "waste_code_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_waste_code_type_name"), "waste_code_type", ["name"], unique=True)
    op.bulk_insert(
        waste_code_type_table,
        [{"id": typeEnum.value[0], "name": typeEnum.value[1]} for typeEnum in WasteCodeEnum],
    )
    op.create_table(
        "collector_to_authorized_vehicle_type",
        sa.Column("collector_id", sa.Integer(), nullable=False),
        sa.Column("authorized_vehicle_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["authorized_vehicle_type_id"],
            ["authorized_vehicle_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["collector_id"],
            ["collector.id"],
        ),
        sa.PrimaryKeyConstraint("collector_id", "authorized_vehicle_type_id"),
    )
    op.create_table(
        "collector_to_circular_strategy_type",
        sa.Column("collector_id", sa.Integer(), nullable=False),
        sa.Column("circular_strategy_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["circular_strategy_type_id"],
            ["circular_strategy_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["collector_id"],
            ["collector.id"],
        ),
        sa.PrimaryKeyConstraint("collector_id", "circular_strategy_type_id"),
    )
    op.create_table(
        "collector_to_material_type",
        sa.Column("collector_id", sa.Integer(), nullable=False),
        sa.Column("material_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["collector_id"],
            ["collector.id"],
        ),
        sa.ForeignKeyConstraint(
            ["material_type_id"],
            ["material_type.id"],
        ),
        sa.PrimaryKeyConstraint("collector_id", "material_type_id"),
    )
    op.create_table(
        "collector_to_waste_code_type",
        sa.Column("collector_id", sa.Integer(), nullable=False),
        sa.Column("waste_code_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["collector_id"],
            ["collector.id"],
        ),
        sa.ForeignKeyConstraint(
            ["waste_code_type_id"],
            ["waste_code_type.id"],
        ),
        sa.PrimaryKeyConstraint("collector_id", "waste_code_type_id"),
    )
    op.create_table(
        "contractor_to_material_type",
        sa.Column("contractor_id", sa.Integer(), nullable=False),
        sa.Column("material_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["contractor_id"],
            ["contractor.id"],
        ),
        sa.ForeignKeyConstraint(
            ["material_type_id"],
            ["material_type.id"],
        ),
        sa.PrimaryKeyConstraint("contractor_id", "material_type_id"),
    )
    op.create_table(
        "contractor_to_waste_code_type",
        sa.Column("contractor_id", sa.Integer(), nullable=False),
        sa.Column("waste_code_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["contractor_id"],
            ["contractor.id"],
        ),
        sa.ForeignKeyConstraint(
            ["waste_code_type_id"],
            ["waste_code_type.id"],
        ),
        sa.PrimaryKeyConstraint("contractor_id", "waste_code_type_id"),
    )
    op.create_table(
        "item",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("category_type_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["category_type_id"],
            ["item_category_type.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "building_element",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("item_id", sa.Integer(), nullable=True),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("total_mass_kg", sa.Float(), nullable=True),
        sa.Column("total_volume_m3", sa.Float(), nullable=True),
        sa.Column("l", sa.Float(), nullable=True),
        sa.Column("L", sa.Float(), nullable=True),
        sa.Column("diameter", sa.Float(), nullable=True),
        sa.Column("H", sa.Float(), nullable=True),
        sa.Column("P", sa.Float(), nullable=True),
        sa.Column("E", sa.Float(), nullable=True),
        sa.Column("localization", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("condition", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("reuse_potential", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("drop_off_procedures", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("storage_method", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("lat", sa.Float(), nullable=True),
        sa.Column("lng", sa.Float(), nullable=True),
        sa.Column("upload_uuid", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("category_type_id", sa.Integer(), nullable=False),
        sa.Column("unit_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_type_id"],
            ["building_element_category_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["item.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unit_type_id"],
            ["building_element_unit_type.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_building_element_item_id"), "building_element", ["item_id"], unique=True)
    op.create_table(
        "item_image",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_best", sa.Boolean(), nullable=False),
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["item.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("url"),
    )
    op.create_table(
        "building_element_to_building_element_constitution_type",
        sa.Column("building_element_id", sa.Integer(), nullable=False),
        sa.Column("building_element_constitution_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["building_element_constitution_type_id"],
            ["building_element_constitution_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["building_element_id"],
            ["building_element.id"],
        ),
        sa.PrimaryKeyConstraint("building_element_id", "building_element_constitution_type_id"),
    )
    op.create_table(
        "building_element_to_building_element_material_type",
        sa.Column("building_element_id", sa.Integer(), nullable=False),
        sa.Column("building_element_material_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["building_element_id"],
            ["building_element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["building_element_material_type_id"],
            ["building_element_material_type.id"],
        ),
        sa.PrimaryKeyConstraint("building_element_id", "building_element_material_type_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("building_element_to_building_element_material_type")
    op.drop_table("building_element_to_building_element_constitution_type")
    op.drop_table("item_image")
    op.drop_index(op.f("ix_building_element_item_id"), table_name="building_element")
    op.drop_table("building_element")
    op.drop_table("item")
    op.drop_table("contractor_to_waste_code_type")
    op.drop_table("contractor_to_material_type")
    op.drop_table("collector_to_waste_code_type")
    op.drop_table("collector_to_material_type")
    op.drop_table("collector_to_circular_strategy_type")
    op.drop_table("collector_to_authorized_vehicle_type")
    op.drop_index(op.f("ix_waste_code_type_name"), table_name="waste_code_type")
    op.drop_table("waste_code_type")
    op.drop_index(op.f("ix_material_type_name"), table_name="material_type")
    op.drop_table("material_type")
    op.drop_index(op.f("ix_item_category_type_name"), table_name="item_category_type")
    op.drop_table("item_category_type")
    op.drop_table("contractor")
    op.drop_table("collector")
    op.drop_index(op.f("ix_circular_strategy_type_name"), table_name="circular_strategy_type")
    op.drop_table("circular_strategy_type")
    op.drop_index(op.f("ix_building_element_unit_type_name"), table_name="building_element_unit_type")
    op.drop_table("building_element_unit_type")
    op.drop_index(op.f("ix_building_element_material_type_name"), table_name="building_element_material_type")
    op.drop_table("building_element_material_type")
    op.drop_index(op.f("ix_building_element_constitution_type_name"), table_name="building_element_constitution_type")
    op.drop_table("building_element_constitution_type")
    op.drop_index(op.f("ix_building_element_category_type_name"), table_name="building_element_category_type")
    op.drop_table("building_element_category_type")
    op.drop_index(op.f("ix_authorized_vehicle_type_name"), table_name="authorized_vehicle_type")
    op.drop_table("authorized_vehicle_type")
    # ### end Alembic commands ###
